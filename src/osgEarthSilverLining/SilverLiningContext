/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#include "Common"
#include "SilverLiningOptions"
#include "SilverLiningAPIWrapper"
#include "SilverLiningCallback"
#include <osg/Referenced>
#include <osg/Light>
#include <osg/Camera>
#include <osgEarth/ThreadingUtils>
#include <osgEarth/NativeProgramAdapter>

namespace SilverLining {
    class Atmosphere;
    class CloudLayer;
    class MillisecondTimer;
}
namespace osgEarth {
    class SpatialReference;
}

namespace osgEarth { namespace SilverLining
{
    /**
     * Contains all the SilverLining SDK pointers.
     */
    class SilverLiningContext : public osg::Referenced
    {
    public:
		SilverLiningContext(const SilverLiningOptions& options,
			const osgEarth::SpatialReference* srs,
			Callback* cb);

        /** Sets the minimum ambient lighting value */
        void setMinimumAmbient(const osg::Vec4f& value);

        /** Installs a user callback for SL initialization */
        Callback* getCallback() const { return _callback.get(); }
		void onDrawSky(osg::RenderInfo& renderInfo);
		void onDrawClouds(osg::RenderInfo& renderInfo);
    public: // accessors

        bool ready() const { return _initialized; }

        ::SilverLining::Atmosphere* getAtmosphere() { return _atmosphere; }

        Atmosphere& getAtmosphereWrapper() { return *_atmosphereWrapper; }

        /** Spatial reference of the map */
        const SpatialReference* getSRS() const { return _srs.get(); }
		void updateLocation(const osg::Vec3d &camera_pos);
        void updateLight(osg::Light *light);
		bool initialize(osg::RenderInfo& renderInfo);
    protected:

        virtual ~SilverLiningContext();

    private:
		osgEarth::NativeProgramAdapterCollection& getOrCreateAdapters(osg::RenderInfo& renderInfo);
        void setupClouds();
		void setSkyBoxSize(double size) { _skyBoxSize = size; }
		double getSkyBoxSize() const { return _skyBoxSize; }
		
    private:
        ::SilverLining::Atmosphere* _atmosphere;
        double _skyBoxSize;
        osg::ref_ptr<const osgEarth::SpatialReference> _srs;
		bool _initialized;
        double _maxAmbientLightingAlt;
        osg::Vec4f                     _minAmbient;
        SilverLiningOptions _options;
        osg::ref_ptr<Callback> _callback;
        Atmosphere* _atmosphereWrapper;
        ::SilverLining::MillisecondTimer* _msTimer;
		osg::buffered_object<osgEarth::NativeProgramAdapterCollection> _adapters;
    };

} } // namespace osgEarth::SilverLining
