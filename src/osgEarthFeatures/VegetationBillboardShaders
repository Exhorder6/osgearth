/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_BILLBOARD_SHADERS2
#define OSGEARTH_BILLBOARD_SHADERS2 1

#include <osgEarth/VirtualProgram>

#define LOG_DEPTH 1
using namespace osgEarth;

namespace
{

	/* const char* billboardVertShader =
	"#version 120\n"
        "void billboardVert(inout vec4 vertex) { \n"
        "} \n";

	  const char* billboardGeomShader =
        "#version 400 compatibility\n"
        "#pragma vp_name BillboardTest\n"

        "layout(triangles) in; \n"
        "layout(triangle_strip) out; \n"
        "layout(max_vertices = 3) out; \n"
        
        "void VP_LoadVertex(in int); \n"
        "void VP_EmitViewVertex(); \n"

        "uniform float osg_FrameTime; \n"

        "void billboardGeom() \n"
        "{ \n"
        "    float strength = 0.25 + sin(osg_FrameTime*2.0)*0.25; \n"
        "    vec4 cen = (gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position)/3.0; \n"        
        "    for(int i=0; i < 3; ++i ) \n"
        "    { \n"
        "        VP_LoadVertex(i); \n"
        "        vec4 pos = gl_in[i].gl_Position; \n"
        "        pos += vec4(normalize(cen.xyz-pos.xyz) * distance(cen, pos) * strength, 0.0); \n"
        "        gl_Position = pos; \n"
        "        VP_EmitViewVertex(); \n"
        "    } \n"
        "    EndPrimitive(); \n"
        "} \n";
		*/


	



    
	const char* billboardVertShader =
        "#version " GLSL_VERSION_STR "\n"
        //"#extension GL_EXT_geometry_shader4 : enable\n"
        GLSL_DEFAULT_PRECISION_FLOAT "\n"
        "varying out vec3 normal;\n"
        "varying out vec4 color;\n"
		"varying out float oe_fogFactor;\n"
		"uniform int oe_fog_algo;\n"
	    "void main(void)\n"
        "{\n"
        "    normal = gl_Normal;\n"
        "    color = gl_Color;\n"
        "    gl_Position = gl_Vertex;\n"
			"float z = length( (gl_ModelViewMatrix*gl_Vertex).xyz );\n"
			"// linear fog\n"
			"oe_fogFactor = 1.0;\n"
			"if (oe_fog_algo == 0)\n"
			"{\n"
			"  oe_fogFactor = clamp((gl_Fog.end - z) / (gl_Fog.end - gl_Fog.start), 0.0, 1.0);\n"
			"}\n"
			"// exp fog\n"
			"else if (oe_fog_algo == 1)\n"
			"{	\n"
			"  oe_fogFactor = clamp(exp( -gl_Fog.density * z ), 0.0, 1.0);\n"
			"}	\n"
			"else if (oe_fog_algo == 2)\n"
			"// exp2 fog\n"
			"{\n"
			"    const float LOG2 = 1.442695;\n"
			"    oe_fogFactor = clamp(exp2( -gl_Fog.density * gl_Fog.density * z * z * LOG2 ), 0.0, 1.0);\n"
			"}	\n"
        "}\n";
    const char* billboardGeomShader =
        "#version " GLSL_VERSION_STR "\n"
        "#extension GL_EXT_geometry_shader4 : enable\n"
        GLSL_DEFAULT_PRECISION_FLOAT "\n"
        "varying out vec2 tex_coord;\n"
        "varying out float brightness;\n"
		"varying out vec3 bnormal;\n"
		"varying out float oe_gefogFactor;\n"
        "varying in vec3 normal[];\n"
        "varying in vec4 color[];\n"
		"varying in float oe_fogFactor[];\n"
		"uniform float oe_logDepth_FC;\n"
		//"varying float oe_logDepth_logz;\n"
        "uniform float billboard_width; \n"
        "uniform float billboard_height; \n"
        "uniform sampler2D billboard_tex; \n"
		"vec4 clip(vec4 clip)\n"
        "{\n"
		" vec4 ret = clip;"
#ifdef LOG_DEPTH
        " if ( oe_logDepth_FC > 0.0 )\n"
		"	 {\n"
        "		ret.z = (log2(max(1e-6, clip.w+1.0))*oe_logDepth_FC - 1.0) * clip.w;\n"
		"	}\n"
#endif //LOG_DEPTH
		" return ret;"
		"}\n"
        "void main(void)\n"
        "{\n"
		"    float scale = color[0].b;\n"
		"	 bnormal = normalize(gl_NormalMatrix * vec3(0.0,0.0,1.0));\n"
		
        "    vec4 v = gl_ModelViewMatrix * gl_PositionIn[0];\n"
        "    vec4 v2 = gl_ModelViewMatrix * (gl_PositionIn[0] + vec4(normal[0]*billboard_height*scale, 0.0));\n"
        "    \n"
        // TODO: this width calculation isn't great but works for now
        "    vec4 center_v = gl_ModelViewMatrix * vec4(0.,0.,0.,1.);\n"
        "    vec4 right_v = gl_ModelViewMatrix * vec4(billboard_width*scale,0.,0.,1.);\n"
        "    float width = distance(right_v, center_v);\n"
        "    \n"

		"    brightness = color[0].r*2.0;\n"
		"    gl_Position = gl_ProjectionMatrix * (v2 + vec4(-width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(0.0, 1.0); \n"
		"	 oe_gefogFactor = oe_fogFactor[0];\n"
        "    EmitVertex(); \n"

        "    gl_Position = gl_ProjectionMatrix * (v2 + vec4(width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(1.0, 1.0); \n"
		"    EmitVertex(); \n"
        
		"    brightness = color[0].r;\n"
        "    gl_Position = gl_ProjectionMatrix * (v + vec4(-width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(0.0, 0.0); \n"
        "    brightness = color[0].r;\n"
        "    EmitVertex(); \n"

        "    gl_Position = gl_ProjectionMatrix * (v + vec4(width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(1.0, 0.0); \n"
        "    EmitVertex(); \n"

        "    EndPrimitive(); \n"
        "}\n";

		 
    const char* billboardFragmentShader =
        "#version " GLSL_VERSION_STR "\n"
        //"#extension GL_EXT_geometry_shader4 : enable\n"
        GLSL_DEFAULT_PRECISION_FLOAT "\n"
        "uniform sampler2D billboard_tex; \n"
		"uniform bool oe_mode_GL_LIGHTING; \n"
		"uniform float oe_thermal_mode;\n"
		"uniform float oe_veg_temperature_detail_strength = 1.0;\n"
		"uniform float oe_veg_temperature = 275;\n"
        "varying vec2 tex_coord;\n"
        "varying float brightness;\n"
		"varying vec3 bnormal; \n"
		"varying float oe_gefogFactor;\n"
	    "void main(void) {\n"
        "    float contrast = clamp(1.0-brightness, 0.85, 1.0);\n"
        "    vec4 color = texture2D(billboard_tex, tex_coord);\n"
        "    color.rgb = clamp(((color.rgb-0.5)*contrast + 0.5) * (1.0+brightness), 0.0, 1.0);\n"
		"    if ( oe_mode_GL_LIGHTING == true)\n"
		"    {\n"
		"    vec3 light_dir = normalize(gl_LightSource[0].position.xyz);\n"
		"    vec3 n = normalize(bnormal);\n"
		"    float NdotL = max(dot(n, light_dir), 0);\n"
		"	 color.rgb *= (NdotL * gl_LightSource[0].diffuse.xyz + gl_LightSource[0].ambient.xyz);\n"
		"    }\n"
		"    if(oe_thermal_mode > 0)\n"
	    "    {\n"
		"		color.r  = ((1.0 - color.r) + (1.0 - color.g) + (1.0 - color.b))/3.0;\n"
		"		color.r = oe_veg_temperature + color.r*oe_veg_temperature_detail_strength;\n"
		"       color.g = color.r;\n"
		"       color.b = color.r;\n"
		"       if ( color.a < 0.2 ) discard; \n"
	    "    }\n"
        "	 color.rgb = mix( gl_Fog.color.rgb, color.rgb, oe_gefogFactor);\n"
        "    gl_FragColor = color; \n"
        "}\n";
}

#endif // OSGEARTH_BILLBOARD_SHADERS2