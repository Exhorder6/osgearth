/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_BILLBOARD_SHADERS2
#define OSGEARTH_BILLBOARD_SHADERS2 1

#include <osgEarth/VirtualProgram>

using namespace osgEarth;

namespace
{

    const char* billboardVertShader =
        "#version " GLSL_VERSION_STR "\n"
        //"#extension GL_EXT_geometry_shader4 : enable\n"
        GLSL_DEFAULT_PRECISION_FLOAT "\n"
        "varying out vec3 normal;\n"
        "varying out vec4 color;\n"
        "void main(void)\n"
        "{\n"
        "    normal = gl_Normal;\n"
        "    color = gl_Color;\n"
        "    gl_Position = gl_Vertex;\n"
        "}\n";


    /**
     * 
     */
    const char* billboardGeomShader =
        "#version " GLSL_VERSION_STR "\n"
        "#extension GL_EXT_geometry_shader4 : enable\n"
        GLSL_DEFAULT_PRECISION_FLOAT "\n"
        "varying out vec2 tex_coord;\n"
        "varying out float brightness;\n"
        "varying in vec3 normal[];\n"
        "varying in vec4 color[];\n"
		"uniform float oe_logDepth_FC;\n"
		//"varying float oe_logDepth_logz;\n"
        "uniform float billboard_width; \n"
        "uniform float billboard_height; \n"
        "uniform sampler2D billboard_tex; \n"
		"vec4 clip(vec4 clip)\n"
        "{\n"
		" vec4 ret = clip;"
#ifdef LOG_DEPTH
        " if ( oe_logDepth_FC > 0.0 )\n"
		"	 {\n"
        "		ret.z = (log2(max(1e-6, clip.w+1.0))*oe_logDepth_FC - 1.0) * clip.w;\n"
		"	}\n"
#endif //LOG_DEPTH
		" return ret;"
		"}\n"
        "void main(void)\n"
        "{\n"
		"    float scale = color[0].b;\n"
        "    vec4 v = gl_ModelViewMatrix * gl_PositionIn[0];\n"
        "    vec4 v2 = gl_ModelViewMatrix * (gl_PositionIn[0] + vec4(normal[0]*billboard_height*scale, 0.0));\n"
        "    \n"
        // TODO: this width calculation isn't great but works for now
        "    vec4 center_v = gl_ModelViewMatrix * vec4(0.,0.,0.,1.);\n"
        "    vec4 right_v = gl_ModelViewMatrix * vec4(billboard_width*scale,0.,0.,1.);\n"
        "    float width = distance(right_v, center_v);\n"
        "    \n"
        "    brightness = color[0].r;\n"
        "    gl_Position = gl_ProjectionMatrix * (v + vec4(width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(1.0, 0.0); \n"
        "    EmitVertex(); \n"
        "    gl_Position = gl_ProjectionMatrix * (v + vec4(-width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(0.0, 0.0); \n"
        "    brightness = color[0].r;\n"
        "    EmitVertex(); \n"
        
        "    brightness = color[0].r*2.0;\n"
        "    gl_Position = gl_ProjectionMatrix * (v2 + vec4(width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(1.0, 1.0); \n"
        "    EmitVertex(); \n"
        "    gl_Position = gl_ProjectionMatrix * (v2 + vec4(-width, 0., 0., 0.)); \n"
		"	 gl_Position = clip(gl_Position);\n"
        "    tex_coord = vec2(0.0, 1.0); \n"
        "    EmitVertex(); \n"
        "    EndPrimitive(); \n"
        "}\n";


    const char* billboardFragmentShader =
        "#version " GLSL_VERSION_STR "\n"
        //"#extension GL_EXT_geometry_shader4 : enable\n"
        GLSL_DEFAULT_PRECISION_FLOAT "\n"
        "uniform sampler2D billboard_tex; \n"
        "varying vec2 tex_coord;\n"
        "varying float brightness;\n"
        "void main(void) {\n"
        "    float contrast = clamp(1.0-brightness, 0.85, 1.0);\n"
        "    vec4 color = texture2D(billboard_tex, tex_coord);\n"
        "    color.rgb = clamp(((color.rgb-0.5)*contrast + 0.5) * (1.0+brightness), 0.0, 1.0);\n"
        //"    if ( color.a < 0.1 ) discard; \n"
        "    gl_FragColor = color; \n"
        "}\n";
}

#endif // OSGEARTH_BILLBOARD_SHADERS2