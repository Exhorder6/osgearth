/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHSYMBOLOGY_BILLBOARD_SYMBOL_H
#define OSGEARTHSYMBOLOGY_BILLBOARD_SYMBOL_H 1

#include <osgEarthSymbology/Symbol>
#include <osgEarthSymbology/Fill>

namespace osgEarth { namespace Symbology
{
    /**
     * Symbol that describes how to render billboard geometries.
     */
    class OSGEARTHSYMBOLOGY_EXPORT BillboardSymbol : public Symbol
    {
    public:
        META_Object(osgEarthSymbology, BillboardSymbol);

        BillboardSymbol(const BillboardSymbol& rhs,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        BillboardSymbol( const Config& conf =Config() );

        /** dtor */
        virtual ~BillboardSymbol() { }
       
        /** Billboard width property */
        optional<float>& width() { return _width; }
        const optional<float>& width() const { return _width; }

		/** Billboard height property */
        optional<float>& height() { return _height; }
        const optional<float>& height() const { return _height; }

		  /** URI of the billboard image file */
        optional<URI>& imageURI() { return _imageURI; }
        const optional<URI>& imageURI() const { return _imageURI; }

		/**
			Scattering density
		*/
		optional<float>& density() { return _density; }
        const optional<float>& density() const { return _density; }


		/**
			Scale variance, value controlling billboard scale randomness. 
			A value of 0 mean no random scaling and a value of 1 (100%) will 
			create billboards in the size range: width,height to 2*width,2*height
		*/
		optional<float>& scaleVariance() { return _scaleVariance; }
        const optional<float>& scaleVariance() const { return _scaleVariance; }

		optional<float>& brightnessVariance() { return _brightnessVariance; }
        const optional<float>& brightnessVariance() const { return _brightnessVariance; }

		optional<unsigned>& randomSeed() { return _randomSeed; }
        const optional<unsigned>& randomSeed() const { return _randomSeed; }

		optional<float>& alphaRefValue() { return _alphaRefValue; }
        const optional<float>& alphaRefValue() const { return _alphaRefValue; }

		optional<bool>& alphaBlend() { return _alphaBlend; }
        const optional<bool>& alphaBlend() const { return _alphaBlend; }
		
    public:
        virtual Config getConfig() const;
        virtual void mergeConfig( const Config& conf );
        static void parseSLD(const Config& c, class Style& style);

    protected:
        optional<float> _width;
		optional<float> _height;
		optional<URI> _imageURI;
		optional<float> _density;
		optional<float> _scaleVariance;
		optional<float> _brightnessVariance;
		optional<float> _alphaRefValue;
		optional<bool> _alphaBlend;
		optional<unsigned>_randomSeed;
    };

} } // namespace osgEarth::Symbology

#endif // OSGEARTHSYMBOLOGY_BILLBOARD_SYMBOL_H
