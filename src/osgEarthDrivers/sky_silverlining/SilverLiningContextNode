/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2015 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#include "SilverLiningOptions"
#include <osgEarthUtil/Sky>
#include <osgEarth/Map>
#include <osgEarth/MapNode>
#include <osgEarth/PhongLightingEffect>
#include <osg/Light>
#include <osg/LightSource>
#include <OpenThreads/Mutex>

namespace osgEarth { namespace SilverLining
{
	class SilverLiningContext;

	/**
	Node that hold the silverlining context,
	one for each camera in the scene. 
	The parent node, SilverLiningNode, is responsible for 
	instantiate this node when new cameras are detected in
	it's traverse method
	*/
	class SilverLiningContextNode : public osg::Geode, public osgEarth::Util::EnvironmentMapNode
	{
	public:
		SilverLiningContextNode(osg::Light* light,
		const osgEarth::MapNode*       map,
		const SilverLiningOptions& options );
		bool hasClouds() const { if( _cloudsDrawable) return true; else return false;}
		osg::ref_ptr<osg::Geode> _geode;
	public: // osg::Node
		void traverse(osg::NodeVisitor&);
		osg::ref_ptr<SilverLiningContext> getContext() const {return _SL;}
		//osgEarth::Util::EnvironmentMapNode
		int getEnvMapTextureID();

		//mutable OpenThreads::Mutex _mutex;
	protected:
		virtual ~SilverLiningContextNode();

		osg::ref_ptr<SilverLiningContext> _SL;
		osg::Drawable* _skyDrawable;
		osg::ref_ptr<osg::Drawable> _cloudsDrawable;
		double _lastAltitude;
		const SilverLiningOptions _options;
		int _envID;
		bool _updateEnvMap;
		const osgEarth::MapNode * _map;
	};

} } // namespace osgEarth::SilverLining
